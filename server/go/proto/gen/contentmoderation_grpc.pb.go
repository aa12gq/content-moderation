// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/contentmoderation.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentModerationService_ModerateContent_FullMethodName      = "/contentmoderation.ContentModerationService/ModerateContent"
	ContentModerationService_ModerateContentAsync_FullMethodName = "/contentmoderation.ContentModerationService/ModerateContentAsync"
	ContentModerationService_GetModerationResult_FullMethodName  = "/contentmoderation.ContentModerationService/GetModerationResult"
	ContentModerationService_ModerateBatchContent_FullMethodName = "/contentmoderation.ContentModerationService/ModerateBatchContent"
)

// ContentModerationServiceClient is the client API for ContentModerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentModerationServiceClient interface {
	// 同步审核接口
	ModerateContent(ctx context.Context, in *ModerationRequest, opts ...grpc.CallOption) (*ModerationResponse, error)
	// 异步审核接口
	ModerateContentAsync(ctx context.Context, in *ModerationRequest, opts ...grpc.CallOption) (*AsyncModerationResponse, error)
	// 获取异步审核结果
	GetModerationResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ModerationResponse, error)
	// 批量审核接口
	ModerateBatchContent(ctx context.Context, in *BatchModerationRequest, opts ...grpc.CallOption) (*BatchModerationResponse, error)
}

type contentModerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentModerationServiceClient(cc grpc.ClientConnInterface) ContentModerationServiceClient {
	return &contentModerationServiceClient{cc}
}

func (c *contentModerationServiceClient) ModerateContent(ctx context.Context, in *ModerationRequest, opts ...grpc.CallOption) (*ModerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModerationResponse)
	err := c.cc.Invoke(ctx, ContentModerationService_ModerateContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentModerationServiceClient) ModerateContentAsync(ctx context.Context, in *ModerationRequest, opts ...grpc.CallOption) (*AsyncModerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncModerationResponse)
	err := c.cc.Invoke(ctx, ContentModerationService_ModerateContentAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentModerationServiceClient) GetModerationResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ModerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModerationResponse)
	err := c.cc.Invoke(ctx, ContentModerationService_GetModerationResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentModerationServiceClient) ModerateBatchContent(ctx context.Context, in *BatchModerationRequest, opts ...grpc.CallOption) (*BatchModerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchModerationResponse)
	err := c.cc.Invoke(ctx, ContentModerationService_ModerateBatchContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentModerationServiceServer is the server API for ContentModerationService service.
// All implementations must embed UnimplementedContentModerationServiceServer
// for forward compatibility.
type ContentModerationServiceServer interface {
	// 同步审核接口
	ModerateContent(context.Context, *ModerationRequest) (*ModerationResponse, error)
	// 异步审核接口
	ModerateContentAsync(context.Context, *ModerationRequest) (*AsyncModerationResponse, error)
	// 获取异步审核结果
	GetModerationResult(context.Context, *ResultRequest) (*ModerationResponse, error)
	// 批量审核接口
	ModerateBatchContent(context.Context, *BatchModerationRequest) (*BatchModerationResponse, error)
	mustEmbedUnimplementedContentModerationServiceServer()
}

// UnimplementedContentModerationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentModerationServiceServer struct{}

func (UnimplementedContentModerationServiceServer) ModerateContent(context.Context, *ModerationRequest) (*ModerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModerateContent not implemented")
}
func (UnimplementedContentModerationServiceServer) ModerateContentAsync(context.Context, *ModerationRequest) (*AsyncModerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModerateContentAsync not implemented")
}
func (UnimplementedContentModerationServiceServer) GetModerationResult(context.Context, *ResultRequest) (*ModerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModerationResult not implemented")
}
func (UnimplementedContentModerationServiceServer) ModerateBatchContent(context.Context, *BatchModerationRequest) (*BatchModerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModerateBatchContent not implemented")
}
func (UnimplementedContentModerationServiceServer) mustEmbedUnimplementedContentModerationServiceServer() {
}
func (UnimplementedContentModerationServiceServer) testEmbeddedByValue() {}

// UnsafeContentModerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentModerationServiceServer will
// result in compilation errors.
type UnsafeContentModerationServiceServer interface {
	mustEmbedUnimplementedContentModerationServiceServer()
}

func RegisterContentModerationServiceServer(s grpc.ServiceRegistrar, srv ContentModerationServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentModerationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentModerationService_ServiceDesc, srv)
}

func _ContentModerationService_ModerateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentModerationServiceServer).ModerateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentModerationService_ModerateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentModerationServiceServer).ModerateContent(ctx, req.(*ModerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentModerationService_ModerateContentAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentModerationServiceServer).ModerateContentAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentModerationService_ModerateContentAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentModerationServiceServer).ModerateContentAsync(ctx, req.(*ModerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentModerationService_GetModerationResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentModerationServiceServer).GetModerationResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentModerationService_GetModerationResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentModerationServiceServer).GetModerationResult(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentModerationService_ModerateBatchContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchModerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentModerationServiceServer).ModerateBatchContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentModerationService_ModerateBatchContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentModerationServiceServer).ModerateBatchContent(ctx, req.(*BatchModerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentModerationService_ServiceDesc is the grpc.ServiceDesc for ContentModerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentModerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contentmoderation.ContentModerationService",
	HandlerType: (*ContentModerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModerateContent",
			Handler:    _ContentModerationService_ModerateContent_Handler,
		},
		{
			MethodName: "ModerateContentAsync",
			Handler:    _ContentModerationService_ModerateContentAsync_Handler,
		},
		{
			MethodName: "GetModerationResult",
			Handler:    _ContentModerationService_GetModerationResult_Handler,
		},
		{
			MethodName: "ModerateBatchContent",
			Handler:    _ContentModerationService_ModerateBatchContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contentmoderation.proto",
}
